"""Add subscription models (Subscription, CreditTransaction, StripeCustomer) and user soft delete

Revision ID: 9a17a2853027
Revises: c59169fb76ec
Create Date: 2025-10-30 17:57:42.700162

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '9a17a2853027'
down_revision = 'c59169fb76ec'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('stripe_customers',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('stripe_customer_id', sa.String(length=255), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=True),
    sa.Column('name', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('stripe_customer_id'),
    sa.UniqueConstraint('user_id')
    )
    op.create_index('idx_stripe_customer_stripe_id', 'stripe_customers', ['stripe_customer_id'], unique=False)
    op.create_index('idx_stripe_customer_user', 'stripe_customers', ['user_id'], unique=False)
    op.create_table('subscriptions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('stripe_subscription_id', sa.String(length=255), nullable=False),
    sa.Column('stripe_customer_id', sa.String(length=255), nullable=False),
    sa.Column('tier', sa.String(length=20), nullable=False),
    sa.Column('billing_interval', sa.String(length=10), nullable=False),
    sa.Column('monthly_credits', sa.Integer(), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('cancel_at_period_end', sa.Boolean(), nullable=False),
    sa.Column('current_period_start', sa.DateTime(), nullable=False),
    sa.Column('current_period_end', sa.DateTime(), nullable=False),
    sa.Column('stripe_price_id', sa.String(length=255), nullable=False),
    sa.Column('amount_cents', sa.Integer(), nullable=False),
    sa.Column('currency', sa.String(length=3), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('cancelled_at', sa.DateTime(), nullable=True),
    sa.CheckConstraint("(status = 'cancelled' AND cancelled_at IS NOT NULL) OR (status != 'cancelled')", name='check_cancelled_at'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('stripe_subscription_id'),
    sa.UniqueConstraint('user_id')
    )
    op.create_index('idx_subscription_period_end', 'subscriptions', ['current_period_end'], unique=False)
    op.create_index('idx_subscription_status', 'subscriptions', ['status'], unique=False)
    op.create_index('idx_subscription_stripe_id', 'subscriptions', ['stripe_subscription_id'], unique=False)
    op.create_index('idx_subscription_user', 'subscriptions', ['user_id'], unique=False)
    op.create_table('credit_transactions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('transaction_type', sa.String(length=30), nullable=False),
    sa.Column('credits_amount', sa.Integer(), nullable=False),
    sa.Column('previous_balance', sa.Integer(), nullable=False),
    sa.Column('new_balance', sa.Integer(), nullable=False),
    sa.Column('subscription_id', sa.UUID(), nullable=True),
    sa.Column('stripe_session_id', sa.String(length=255), nullable=True),
    sa.Column('stripe_payment_intent_id', sa.String(length=255), nullable=True),
    sa.Column('stripe_invoice_id', sa.String(length=255), nullable=True),
    sa.Column('amount_cents', sa.Integer(), nullable=True),
    sa.Column('currency', sa.String(length=3), nullable=True),
    sa.Column('top_up_package', sa.String(length=20), nullable=True),
    sa.Column('discount_applied', sa.DECIMAL(precision=5, scale=2), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('metadata_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('collection_id', sa.UUID(), nullable=True),
    sa.Column('sample_id', sa.UUID(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['collection_id'], ['collections.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['sample_id'], ['samples.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['subscription_id'], ['subscriptions.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_credit_tx_created', 'credit_transactions', ['created_at'], unique=False)
    op.create_index('idx_credit_tx_status', 'credit_transactions', ['status'], unique=False)
    op.create_index('idx_credit_tx_stripe_invoice', 'credit_transactions', ['stripe_invoice_id'], unique=False, postgresql_where=sa.text('stripe_invoice_id IS NOT NULL'))
    op.create_index('idx_credit_tx_subscription', 'credit_transactions', ['subscription_id'], unique=False)
    op.create_index('idx_credit_tx_type', 'credit_transactions', ['transaction_type'], unique=False)
    op.create_index('idx_credit_tx_user', 'credit_transactions', ['user_id'], unique=False)
    op.create_index('idx_credit_tx_user_created', 'credit_transactions', ['user_id', 'created_at'], unique=False)
    op.create_index('idx_credit_tx_user_type', 'credit_transactions', ['user_id', 'transaction_type'], unique=False)
    op.add_column('users', sa.Column('is_deleted', sa.Boolean(), nullable=False, server_default='false'))
    op.add_column('users', sa.Column('deleted_at', sa.DateTime(), nullable=True))
    op.create_check_constraint(
        'check_deleted_at',
        'users',
        "(is_deleted = false) OR (is_deleted = true AND deleted_at IS NOT NULL)"
    )
    op.create_index('idx_users_is_deleted', 'users', ['is_deleted'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_users_is_deleted', table_name='users')
    op.drop_constraint('check_deleted_at', 'users', type_='check')
    op.drop_column('users', 'deleted_at')
    op.drop_column('users', 'is_deleted')
    op.drop_index('idx_credit_tx_user_type', table_name='credit_transactions')
    op.drop_index('idx_credit_tx_user_created', table_name='credit_transactions')
    op.drop_index('idx_credit_tx_user', table_name='credit_transactions')
    op.drop_index('idx_credit_tx_type', table_name='credit_transactions')
    op.drop_index('idx_credit_tx_subscription', table_name='credit_transactions')
    op.drop_index('idx_credit_tx_stripe_invoice', table_name='credit_transactions', postgresql_where=sa.text('stripe_invoice_id IS NOT NULL'))
    op.drop_index('idx_credit_tx_status', table_name='credit_transactions')
    op.drop_index('idx_credit_tx_created', table_name='credit_transactions')
    op.drop_table('credit_transactions')
    op.drop_index('idx_subscription_user', table_name='subscriptions')
    op.drop_index('idx_subscription_stripe_id', table_name='subscriptions')
    op.drop_index('idx_subscription_status', table_name='subscriptions')
    op.drop_index('idx_subscription_period_end', table_name='subscriptions')
    op.drop_table('subscriptions')
    op.drop_index('idx_stripe_customer_user', table_name='stripe_customers')
    op.drop_index('idx_stripe_customer_stripe_id', table_name='stripe_customers')
    op.drop_table('stripe_customers')
    # ### end Alembic commands ###